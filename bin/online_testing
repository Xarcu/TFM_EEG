import argparse
import os
import numpy as np
import mne
import joblib
from pylsl import StreamInlet, resolve_stream
import time
import threading
import random
import json
import sys
import winsound  # Optional: Use this for sound feedback on Windows

# Global variables
stop_event = threading.Event()
baseline_event = threading.Event()
baseline_data = []
baseline_mean = None
lock = threading.Lock()

def load_model(model_path):
    """Load a pre-trained model."""
    return joblib.load(model_path)

def receive_lsl_data(inlet, duration=1.0):
    """Receive data from the LSL stream for a given duration."""
    start_time = time.time()
    data = []
    timestamps = []
    while (time.time() - start_time) < duration:
        sample, timestamp = inlet.pull_sample()
        if sample is not None:
            data.append(sample)
            timestamps.append(timestamp)
    return np.array(data), np.array(timestamps)

def generate_random_target():
    """Generate a random target: 0 for LEFT, 1 for RIGHT."""
    return random.choice([0, 1])

def process_and_classify(data_source, csp, classifier, feedback_duration=1.0, mode="online", sfreq=250):
    global baseline_mean, baseline_data

    print("Press Enter to stop the program after baseline recording is complete.")
    print("Waiting for data...")

    correct_predictions = 0
    total_predictions = 0

    while not stop_event.is_set():
        # Check if baseline recording is in progress
        with lock:
            if baseline_event.is_set():
                # Fetch data to accumulate for baseline
                data, _ = receive_lsl_data(data_source, duration=feedback_duration)
                if data.size == 0:
                    continue
                baseline_data.append(data)
                print(f"Received {data.shape[0]} samples.\nCollecting baseline data...")
                continue  # Skip predictions and target generation

        # If no baseline mean is calculated yet, skip predictions
        if baseline_mean is None:
            continue

        # Generate a random target (label) and display it
        target = generate_random_target()
        print(f"Target: {'LEFT' if target == 0 else 'RIGHT'}")

        # Play sound for LEFT/RIGHT
        if target == 0:
            winsound.Beep(600, 300)  # LOWER tone for LEFT
        else:
            winsound.Beep(1000, 300)  # HIGHER tone for RIGHT

        # Fetch data: online from LSL
        data, _ = receive_lsl_data(data_source, duration=feedback_duration)
        if data.size == 0:
            continue

        print(f"Received {data.shape[0]} samples.")

        # Prepare channel info and sampling rate
        ch_names = ['F3', 'Fz', 'F4', 'C3', 'Cz', 'C4', 'P3', 'Pz', 'P4', 'GND']
        if data.shape[1] != len(ch_names):
            print(f"Unexpected number of channels: {data.shape[1]} (expected {len(ch_names)})")
            continue

        # Subtract baseline if available
        if baseline_mean is not None:
            data -= baseline_mean

        # Create MNE Raw object
        info = mne.create_info(ch_names=ch_names, sfreq=sfreq, ch_types='eeg')
        raw = mne.io.RawArray(data.T, info)

        # Filter the data
        filtered_raw = raw.copy().filter(l_freq=0.3, h_freq=30, fir_design='firwin', filter_length='auto', phase='zero')
        filtered_raw.notch_filter(freqs=[50], method='iir')

        # Reshape data for CSP transformation
        reshaped_data = filtered_raw.get_data()[np.newaxis, :, :]  # Add a trial dimension
        if reshaped_data.shape[1] != len(csp.patterns_):  # Check number of channels matches CSP training
            print(f"Mismatch in channels: expected {len(csp.patterns_)}, got {reshaped_data.shape[1]}")
            continue

        csp_features = csp.transform(reshaped_data)  # Output shape: (1, n_components)

        # Classify using the trained model
        try:
            prediction = classifier.predict(csp_features)[0]  # Extract single prediction
        except Exception as e:
            print(f"Error during classification: {e}")
            continue

        # Determine prediction outcome
        print(f"Prediction: {'LEFT' if prediction == 0 else 'RIGHT'}")
        total_predictions += 1
        if prediction == target:
            correct_predictions += 1

    if total_predictions > 0:
        accuracy = correct_predictions / total_predictions * 100
        print(f"Correct: {correct_predictions}, Total: {total_predictions}")
        print(f"Classification Accuracy: {accuracy:.2f}%")
    else:
        print("No predictions made.")

def monitor_keyboard():
    """Monitor keyboard input to stop the program or handle baseline collection."""
    global baseline_event, baseline_mean

    print("Press 'S' to start baseline recording. Press 'S' again to stop.")

    while not stop_event.is_set():
        key = input("Press 'S' to toggle baseline recording, or Enter to stop: ").strip().upper()
        if key == "S":
            with lock:
                if baseline_event.is_set():
                    baseline_event.clear()
                    print("Baseline recording stopped.")

                    # Compute baseline mean
                    if len(baseline_data) > 0:
                        all_baseline_data = np.vstack(baseline_data)
                        baseline_mean = np.mean(all_baseline_data, axis=0)
                        print(f"Baseline computed: {baseline_mean}")
                        baseline_data.clear()
                else:
                    baseline_event.set()
                    print("Baseline recording started.")
        elif key == "":
            stop_event.set()
            print("Stopping the program...")

def main(base_save_dir, csp_model_path, classifier_model_path, mode, feedback_duration=1.0):
    """Main function to set up LSL stream and process data."""
    # Load CSP and classifier models
    csp = load_model(csp_model_path)
    classifier = load_model(classifier_model_path)

    print("Looking for an EEG stream...")
    streams = resolve_stream('type', 'EEG')
    if not streams:
        print("No EEG streams found. Ensure the LSL stream is active.")
        return

    inlet = StreamInlet(streams[0])
    sfreq = inlet.info().nominal_srate()  # Get the sampling frequency

    # Start a thread to monitor keyboard input
    keyboard_thread = threading.Thread(target=monitor_keyboard, daemon=True)
    keyboard_thread.start()

    # Process and classify data in real-time
    process_and_classify(inlet, csp, classifier, feedback_duration, mode, sfreq)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Real-time EEG Classification with CSP and Trained Classifier")
    parser.add_argument('-c', '--csp_model_path', required=True, help="Path to the pre-trained CSP model")
    parser.add_argument('-k', '--classifier_model_path', required=True, help="Path to the pre-trained classifier model")
    parser.add_argument('-d', '--duration', type=float, default=1, help="Duration for feedback in seconds")
    args = parser.parse_args()

    main("dummy_base_save_dir", args.csp_model_path, args.classifier_model_path, "online", args.duration)
