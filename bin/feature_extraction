import os
import argparse
import mne
import numpy as np
import pandas as pd
import json
import matplotlib.pyplot as plt

def plot_eeg(raw, subject_folder, plot_dir):
    """ Plot raw EEG data and save the plot to the specified directory. """
    plt.figure(figsize=(10, 6))
    raw.plot(scalings='auto', show=False, block=False)
    plot_path = os.path.join(plot_dir, f"{subject_folder}_eeg_plot.png")
    plt.savefig(plot_path)
    plt.close()
    print(f"[DEBUG] EEG plot saved to {plot_path}")

def extract_features_from_events(raw, events, window_duration=1.5, sfreq=250):
    """ Extract features from each event and store them with separate rows for each channel. """
    features_list = []
    max_time = raw.n_times / sfreq
    print(f"[DEBUG] Data duration: {max_time}s, Sampling rate: {sfreq}Hz")

    # Adjust timestamps to start from zero
    event_times_sec = events - events.min()
    print(f"Adjusted Event Times (in seconds): {event_times_sec}")

    # Check for out-of-bounds events
    out_of_bounds_events = event_times_sec[(event_times_sec < 0) | (event_times_sec > max_time)]
    if len(out_of_bounds_events) > 0:
        print("Out of bounds events found:", out_of_bounds_events)
    else:
        print("All events are within the EEG data duration.")

    for idx, timestamp in enumerate(event_times_sec):
        if timestamp < 0 or timestamp + window_duration > max_time:
            continue  # Skip out-of-bounds events

        start_sample = int(timestamp * sfreq)
        end_sample = start_sample + int(window_duration * sfreq)
        data_window, _ = raw[:, start_sample:end_sample]

        # Calculate features for each channel separately
        for ch_idx, ch_data in enumerate(data_window):
            features = {
                'channel': raw.ch_names[ch_idx],  # Channel name
                'rms': np.sqrt(np.mean(ch_data ** 2)),
                'ptp': np.ptp(ch_data)
            }

            # Power spectral density and band-specific powers
            psd, freqs = mne.time_frequency.psd_array_multitaper(
                ch_data[None, :], sfreq, fmin=0.5, fmax=40, verbose=False
            )
            features.update({
                'delta_power': psd[0, (freqs >= 0.5) & (freqs < 4)].mean(),
                'theta_power': psd[0, (freqs >= 4) & (freqs < 8)].mean(),
                'alpha_power': psd[0, (freqs >= 8) & (freqs < 13)].mean(),
                'beta_power': psd[0, (freqs >= 13) & (freqs < 30)].mean(),
                'gamma_power': psd[0, (freqs >= 30) & (freqs < 40)].mean()
            })
            
            features_list.append(features)
    
    return features_list

def load_and_extract_features(base_dir, plot_dir, sfreq=250):
    """ Load .fif files and extract features, adding 'side' and 'channel' for each trial. """
    left_dir = os.path.join(base_dir, 'L')
    right_dir = os.path.join(base_dir, 'R')
    all_features = []

    for side, side_dir in zip(["left", "right"], [left_dir, right_dir]):
        if not os.path.exists(side_dir):
            print(f"[ERROR] Directory not found: {side_dir}")
            continue
        
        for subject_folder in sorted(os.listdir(side_dir)):
            subject_path = os.path.join(side_dir, subject_folder)
            if not os.path.isdir(subject_path):
                continue  # Skip non-directory items
            
            raw_file, npz_file = None, None
            for root, _, files in os.walk(subject_path):
                for file in files:
                    if file.endswith('_raw.fif'):
                        raw_file = os.path.join(root, file)
                    elif file.endswith('_event_data.npz'):
                        npz_file = os.path.join(root, file)
            
            if raw_file and npz_file:
                try:
                    raw = mne.io.read_raw_fif(raw_file, preload=True, verbose=False)
                    plot_eeg(raw, subject_folder, plot_dir)  # Plot EEG data

                    npz_data = np.load(npz_file, allow_pickle=True)
                    events_data = np.array(npz_data['event_timestamps'], dtype=float)
                    
                    # Extract features with each channel separately in its own row
                    features = extract_features_from_events(raw, events_data, window_duration=0.5, sfreq=sfreq)
                    for feat in features:
                        feat['side'] = side  # Add side info
                        feat['subject'] = subject_folder  # Track subject
                        all_features.append(feat)
                except Exception as e:
                    print(f"[ERROR] Error processing subject {subject_folder}: {e}")
            else:
                print(f"[DEBUG] Missing files for subject {subject_folder}.")
    
    return all_features


def save_features(features, output_path, file_format="parquet"):
    """Save the extracted features to a specified format with a side column for left/right info."""
    print(f"[DEBUG] Saving features to {output_path} as {file_format} format.")
    features_df = pd.DataFrame(features)
    
    if file_format == "parquet":
        if not output_path.endswith(".parquet"):
            output_path += ".parquet"
        features_df.to_parquet(output_path)
    elif file_format == "csv":
        if not output_path.endswith(".csv"):
            output_path += ".csv"
        features_df.to_csv(output_path, index=False)
    elif file_format == "json":
        if not output_path.endswith(".json"):
            output_path += ".json"
        features_df.to_json(output_path, orient='records')
    print(f"[DEBUG] Features saved successfully in {file_format} format at {output_path}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Extract features from .fif files based on event timestamps.")
    parser.add_argument('-f', '--base_dir', required=True, help='Base directory containing LEFT and RIGHT processed files.')
    parser.add_argument('-o', '--output_path', required=True, help='Output path for saving the extracted features.')
    parser.add_argument('--file_format', choices=['json', 'csv', 'parquet'], default='parquet', help="Output format for the features.")
    parser.add_argument('-p', '--plot_dir', required=True, help='Directory to save plots of .fif files.')
    args = parser.parse_args()

    # Extract features and store them in a list of dictionaries
    features = load_and_extract_features(args.base_dir, args.plot_dir, sfreq=250)

    # Save the features
    save_features(features, args.output_path, file_format=args.file_format)
